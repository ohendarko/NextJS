// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  email              String              @unique
  name               String?
  password           String?
  createdAt          DateTime            @default(now())
  profileImage        String?
  admin     Boolean  @default(false)
  verified  Boolean  @default(false)
  hasCompletedOnboarding    Boolean  @default(false)

  // Document Checklist
  fpgeeFormSubmitted        Boolean @default(false)
  passportScanSubmitted     Boolean @default(false)
  passportPhotoSubmitted    Boolean @default(false)
  pharmacyLicenseSubmitted  Boolean @default(false)
  goodStandingLetterSubmitted Boolean @default(false)
  eceApplicationCompleted   Boolean @default(false)
  officialTranscriptsSent   Boolean @default(false)
  courseDescriptionsSubmitted   Boolean @default(false)
  eceEvaluationFeeePaid   Boolean @default(false)
  toeflTestRegistered   Boolean @default(false)
  toeflTestCompleted   Boolean @default(false)
  toeflScoresSent   Boolean @default(false)
  naplexEligibilityConfirmed   Boolean @default(false)
  naplexTestRegistered   Boolean @default(false)
  naplexCompleted   Boolean @default(false)
  mpjeEligibilityConfirmed   Boolean @default(false)
  mpjeTestRegistered   Boolean @default(false)
  mpjeTestCompleted   Boolean @default(false)

  // Basic Info
  dateOfBirth        DateTime?
  gender             String?
  phoneNumber        String?
  timezone           String?

  // Education
  countryOfDegree    String?
  degreeType         String?
  graduationYear     String?
  degreeFile         String?
  passportFile       String?
  licenseFile        String?
  documents Document[]

  // Travel
  hasVisa            Boolean?
  visaType           String?
  arrivalDate        DateTime?
  preferredState     String?
  selectedPackage     String?

  // Relations
  packageSelections  PackageSelection[]
  consultations      Consultation[]
  accounts  Account[]
  sessions  Session[]
  documentCategories     DocumentCategory[]

  @@map("users")
}


type DocumentCategory {
  id        String
  title     String
  documents Documents[]
}

type Documents {
  id         String
  name       String
  type       String
  status     String
  uploadDate String?
  size       String?
  notes      String?
}



model PackageSelection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  packageName String
  isPaid      Boolean  @default(false)
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())

  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])

  @@map("package_selections")
}


model Consultation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime
  isPaid     Boolean  @default(false)
  createdAt  DateTime @default(now())

  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])

  @@map("consultations")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  ownerName  String
  ownerEmail String
  name       String
  type       String   // e.g., "PDF", "Image"
  status     String   // e.g., "uploaded", "verified"
  uploadDate DateTime @default(now())
  size       String   // e.g., "1.2 MB"
  url        String   // Cloudinary URL
  notes      String?  // optional notes from user or admin
  category   String   // e.g., "education", "professional", "fpgee"

  user       User     @relation(fields: [userId], references: [id])
}